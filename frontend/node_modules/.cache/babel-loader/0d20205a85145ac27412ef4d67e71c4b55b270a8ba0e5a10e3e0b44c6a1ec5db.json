{"ast":null,"code":"import _objectSpread from\"D:/GITHUB/IT4549-156729-Group16/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useContext,useEffect}from'react';import AuthContext from'../../contexts/AuthContext';import axios from'axios';// For API calls in the future\nimport{Link}from'react-router-dom';// Import Link\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const MemberProfilePage=()=>{const{user,setUser:updateUserContext,token}=useContext(AuthContext);// Renamed setAuthUser to updateUserContext for clarity\nconst[profileData,setProfileData]=useState({fullName:'',email:'',dateOfBirth:'',phoneNumber:'',address:'',occupation:''// profilePictureUrl: '', // For file uploads, more complex handling needed\n});const[isLoading,setIsLoading]=useState(true);const[error,setError]=useState('');const[success,setSuccess]=useState('');useEffect(()=>{if(user){// In a real app, you would fetch this data from the backend\n// For now, we'll use the user data from AuthContext and add placeholders\nsetProfileData({fullName:user.fullName||'',email:user.email||'',dateOfBirth:user.dateOfBirth||'',// Assuming these fields might exist or be fetched\nphoneNumber:user.phoneNumber||'',address:user.address||'',occupation:user.occupation||''});setIsLoading(false);}else{// If user is null (e.g., after logout or if not logged in), redirect or show message\n// This might be handled by a protected route component in a real app\nsetIsLoading(false);// Optionally, redirect to login or show an error/message\n// For now, we'll just ensure form fields are empty or disabled if no user.\nsetProfileData({fullName:'',email:'',dateOfBirth:'',phoneNumber:'',address:'',occupation:''});}},[user]);const handleChange=e=>{setProfileData(_objectSpread(_objectSpread({},profileData),{},{[e.target.name]:e.target.value}));};const handleSubmit=async e=>{e.preventDefault();setError('');setSuccess('');if(!user){setError(\"No user logged in. Cannot update profile.\");return;}try{// Placeholder for API call\nconsole.log('Updating profile with:',profileData);// const response = await axios.put(`${process.env.REACT_APP_API_URL}/profile/me`, profileData, {\n//   headers: { Authorization: `Bearer ${token}` }\n// });\n// const updatedProfileFromServer = response.data.updatedProfile;\n// updateUserContext(updatedProfileFromServer); // Update context with data from server\n// Simulate updating AuthContext user (in real app, this comes from API response)\n// For simulation, we directly use profileData.\n// In a real app, only update context with what the server confirms and returns.\nconst simulatedUpdate={fullName:profileData.fullName,email:profileData.email,dateOfBirth:profileData.dateOfBirth,phoneNumber:profileData.phoneNumber,address:profileData.address,occupation:profileData.occupation};updateUserContext(simulatedUpdate);// This will update context and localStorage\nsetSuccess('Profile updated successfully! (Simulated)');}catch(err){var _err$response,_err$response$data;setError(((_err$response=err.response)===null||_err$response===void 0?void 0:(_err$response$data=_err$response.data)===null||_err$response$data===void 0?void 0:_err$response$data.msg)||'Failed to update profile.');console.error('Profile update error:',err);}};if(isLoading){return/*#__PURE__*/_jsx(\"p\",{children:\"Loading profile...\"});}return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Link,{to:\"/dashboard\",style:{display:'inline-block',marginBottom:'20px',padding:'10px 15px',backgroundColor:'#6c757d',color:'white',textDecoration:'none',borderRadius:'4px'},children:\"\\u2190 Back to Dashboard\"}),/*#__PURE__*/_jsx(\"h2\",{children:\"My Profile\"}),error&&/*#__PURE__*/_jsx(\"p\",{style:{color:'red'},children:error}),success&&/*#__PURE__*/_jsx(\"p\",{style:{color:'green'},children:success}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"fullName\",children:\"Full Name:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"fullName\",name:\"fullName\",value:profileData.fullName,onChange:handleChange,required:true})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"email\",children:\"Email:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"email\",id:\"email\",name:\"email\",value:profileData.email,onChange:handleChange,required:true// readOnly // Email might not be editable or require special verification\n})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"dateOfBirth\",children:\"Date of Birth:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"date\",id:\"dateOfBirth\",name:\"dateOfBirth\",value:profileData.dateOfBirth,onChange:handleChange})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"phoneNumber\",children:\"Phone Number:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"tel\",id:\"phoneNumber\",name:\"phoneNumber\",value:profileData.phoneNumber,onChange:handleChange})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"address\",children:\"Address:\"}),/*#__PURE__*/_jsx(\"textarea\",{id:\"address\",name:\"address\",value:profileData.address,onChange:handleChange,rows:\"3\"})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"occupation\",children:\"Occupation:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"occupation\",name:\"occupation\",value:profileData.occupation,onChange:handleChange})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Save Changes\"})]})]});};export default MemberProfilePage;","map":{"version":3,"names":["React","useState","useContext","useEffect","AuthContext","axios","Link","jsx","_jsx","jsxs","_jsxs","MemberProfilePage","user","setUser","updateUserContext","token","profileData","setProfileData","fullName","email","dateOfBirth","phoneNumber","address","occupation","isLoading","setIsLoading","error","setError","success","setSuccess","handleChange","e","_objectSpread","target","name","value","handleSubmit","preventDefault","console","log","simulatedUpdate","err","_err$response","_err$response$data","response","data","msg","children","to","style","display","marginBottom","padding","backgroundColor","color","textDecoration","borderRadius","onSubmit","htmlFor","type","id","onChange","required","rows"],"sources":["D:/GITHUB/IT4549-156729-Group16/frontend/src/pages/Member/MemberProfilePage.jsx"],"sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\r\nimport AuthContext from '../../contexts/AuthContext';\r\nimport axios from 'axios'; // For API calls in the future\r\nimport { Link } from 'react-router-dom'; // Import Link\r\n\r\nconst MemberProfilePage = () => {\r\n  const { user, setUser: updateUserContext, token } = useContext(AuthContext); // Renamed setAuthUser to updateUserContext for clarity\r\n  \r\n  const [profileData, setProfileData] = useState({\r\n    fullName: '',\r\n    email: '',\r\n    dateOfBirth: '',\r\n    phoneNumber: '',\r\n    address: '',\r\n    occupation: '',\r\n    // profilePictureUrl: '', // For file uploads, more complex handling needed\r\n  });\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState('');\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      // In a real app, you would fetch this data from the backend\r\n      // For now, we'll use the user data from AuthContext and add placeholders\r\n      setProfileData({\r\n        fullName: user.fullName || '',\r\n        email: user.email || '',\r\n        dateOfBirth: user.dateOfBirth || '', // Assuming these fields might exist or be fetched\r\n        phoneNumber: user.phoneNumber || '',\r\n        address: user.address || '',\r\n        occupation: user.occupation || '',\r\n      });\r\n      setIsLoading(false);\r\n    } else {\r\n      // If user is null (e.g., after logout or if not logged in), redirect or show message\r\n      // This might be handled by a protected route component in a real app\r\n      setIsLoading(false);\r\n      // Optionally, redirect to login or show an error/message\r\n      // For now, we'll just ensure form fields are empty or disabled if no user.\r\n      setProfileData({\r\n        fullName: '', email: '', dateOfBirth: '', phoneNumber: '', address: '', occupation: ''\r\n      });\r\n    }\r\n  }, [user]);\r\n\r\n  const handleChange = (e) => {\r\n    setProfileData({ ...profileData, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setError('');\r\n    setSuccess('');\r\n    if (!user) {\r\n      setError(\"No user logged in. Cannot update profile.\");\r\n      return;\r\n    }\r\n    try {\r\n      // Placeholder for API call\r\n      console.log('Updating profile with:', profileData);\r\n      // const response = await axios.put(`${process.env.REACT_APP_API_URL}/profile/me`, profileData, {\r\n      //   headers: { Authorization: `Bearer ${token}` }\r\n      // });\r\n      // const updatedProfileFromServer = response.data.updatedProfile;\r\n      // updateUserContext(updatedProfileFromServer); // Update context with data from server\r\n\r\n      // Simulate updating AuthContext user (in real app, this comes from API response)\r\n      // For simulation, we directly use profileData.\r\n      // In a real app, only update context with what the server confirms and returns.\r\n      const simulatedUpdate = { \r\n        fullName: profileData.fullName, \r\n        email: profileData.email,\r\n        dateOfBirth: profileData.dateOfBirth,\r\n        phoneNumber: profileData.phoneNumber,\r\n        address: profileData.address,\r\n        occupation: profileData.occupation,\r\n      };\r\n      updateUserContext(simulatedUpdate); // This will update context and localStorage\r\n      setSuccess('Profile updated successfully! (Simulated)');\r\n\r\n    } catch (err) {\r\n      setError(err.response?.data?.msg || 'Failed to update profile.');\r\n      console.error('Profile update error:', err);\r\n    }\r\n  };\r\n\r\n  if (isLoading) {\r\n    return <p>Loading profile...</p>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Link to=\"/dashboard\" style={{ display: 'inline-block', marginBottom: '20px', padding: '10px 15px', backgroundColor: '#6c757d', color: 'white', textDecoration: 'none', borderRadius: '4px' }}>\r\n        &larr; Back to Dashboard\r\n      </Link>\r\n      <h2>My Profile</h2>\r\n      {error && <p style={{ color: 'red' }}>{error}</p>}\r\n      {success && <p style={{ color: 'green' }}>{success}</p>}\r\n      <form onSubmit={handleSubmit}>\r\n        <div>\r\n          <label htmlFor=\"fullName\">Full Name:</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"fullName\"\r\n            name=\"fullName\"\r\n            value={profileData.fullName}\r\n            onChange={handleChange}\r\n            required\r\n          />\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"email\">Email:</label>\r\n          <input\r\n            type=\"email\"\r\n            id=\"email\"\r\n            name=\"email\"\r\n            value={profileData.email}\r\n            onChange={handleChange}\r\n            required\r\n          // readOnly // Email might not be editable or require special verification\r\n          />\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"dateOfBirth\">Date of Birth:</label>\r\n          <input\r\n            type=\"date\"\r\n            id=\"dateOfBirth\"\r\n            name=\"dateOfBirth\"\r\n            value={profileData.dateOfBirth}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"phoneNumber\">Phone Number:</label>\r\n          <input\r\n            type=\"tel\"\r\n            id=\"phoneNumber\"\r\n            name=\"phoneNumber\"\r\n            value={profileData.phoneNumber}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"address\">Address:</label>\r\n          <textarea\r\n            id=\"address\"\r\n            name=\"address\"\r\n            value={profileData.address}\r\n            onChange={handleChange}\r\n            rows=\"3\"\r\n          ></textarea>\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"occupation\">Occupation:</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"occupation\"\r\n            name=\"occupation\"\r\n            value={profileData.occupation}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        {/* Add profile picture upload later if needed */}\r\n        <button type=\"submit\">Save Changes</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MemberProfilePage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}