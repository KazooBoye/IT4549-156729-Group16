{"ast":null,"code":"import _objectSpread from\"D:/GITHUB/IT4549-156729-Group16/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useState,useEffect}from'react';// import axios from 'axios'; // If you need to verify token with backend\nimport{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(null);export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[token,setToken]=useState(null);const[loading,setLoading]=useState(true);// To handle initial loading of persisted state\nuseEffect(()=>{// Try to load token and user from localStorage on initial app load\nconst storedToken=localStorage.getItem('token');const storedUser=localStorage.getItem('user');if(storedToken&&storedUser){setToken(storedToken);try{setUser(JSON.parse(storedUser));// Optionally, you might want to verify the token with your backend here\n// For example:\n// axios.get('/api/auth/verify-token', { headers: { Authorization: `Bearer ${storedToken}` }})\n//   .then(response => setUser(response.data.user))\n//   .catch(() => {\n//     localStorage.removeItem('token');\n//     localStorage.removeItem('user');\n//     setUser(null);\n//     setToken(null);\n//   });\n}catch(error){console.error(\"Failed to parse stored user:\",error);localStorage.removeItem('user');// Clear corrupted data\n}}setLoading(false);// Finished loading persisted state\n},[]);const login=(userData,authToken)=>{localStorage.setItem('user',JSON.stringify(userData));localStorage.setItem('token',authToken);setUser(userData);setToken(authToken);};const logout=()=>{localStorage.removeItem('user');localStorage.removeItem('token');setUser(null);setToken(null);// Optionally, redirect to login page or home page\n// window.location.href = '/login';\n};// This function is used by MemberProfilePage to update user details in context and localStorage\nconst updateUserContext=updatedUserData=>{setUser(prevUser=>{const newUser=_objectSpread(_objectSpread({},prevUser),updatedUserData);localStorage.setItem('user',JSON.stringify(newUser));return newUser;});};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{user,setUser:updateUserContext,token,login,logout,loading},children:!loading&&children});};export default AuthContext;","map":{"version":3,"names":["React","createContext","useState","useEffect","jsx","_jsx","AuthContext","AuthProvider","_ref","children","user","setUser","token","setToken","loading","setLoading","storedToken","localStorage","getItem","storedUser","JSON","parse","error","console","removeItem","login","userData","authToken","setItem","stringify","logout","updateUserContext","updatedUserData","prevUser","newUser","_objectSpread","Provider","value"],"sources":["D:/GITHUB/IT4549-156729-Group16/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\n// import axios from 'axios'; // If you need to verify token with backend\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [token, setToken] = useState(null);\r\n  const [loading, setLoading] = useState(true); // To handle initial loading of persisted state\r\n\r\n  useEffect(() => {\r\n    // Try to load token and user from localStorage on initial app load\r\n    const storedToken = localStorage.getItem('token');\r\n    const storedUser = localStorage.getItem('user');\r\n\r\n    if (storedToken && storedUser) {\r\n      setToken(storedToken);\r\n      try {\r\n        setUser(JSON.parse(storedUser));\r\n        // Optionally, you might want to verify the token with your backend here\r\n        // For example:\r\n        // axios.get('/api/auth/verify-token', { headers: { Authorization: `Bearer ${storedToken}` }})\r\n        //   .then(response => setUser(response.data.user))\r\n        //   .catch(() => {\r\n        //     localStorage.removeItem('token');\r\n        //     localStorage.removeItem('user');\r\n        //     setUser(null);\r\n        //     setToken(null);\r\n        //   });\r\n      } catch (error) {\r\n        console.error(\"Failed to parse stored user:\", error);\r\n        localStorage.removeItem('user'); // Clear corrupted data\r\n      }\r\n    }\r\n    setLoading(false); // Finished loading persisted state\r\n  }, []);\r\n\r\n  const login = (userData, authToken) => {\r\n    localStorage.setItem('user', JSON.stringify(userData));\r\n    localStorage.setItem('token', authToken);\r\n    setUser(userData);\r\n    setToken(authToken);\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('token');\r\n    setUser(null);\r\n    setToken(null);\r\n    // Optionally, redirect to login page or home page\r\n    // window.location.href = '/login';\r\n  };\r\n  \r\n  // This function is used by MemberProfilePage to update user details in context and localStorage\r\n  const updateUserContext = (updatedUserData) => {\r\n    setUser(prevUser => {\r\n      const newUser = { ...prevUser, ...updatedUserData };\r\n      localStorage.setItem('user', JSON.stringify(newUser));\r\n      return newUser;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, setUser: updateUserContext, token, login, logout, loading }}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext;\r\n"],"mappings":"6HAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CACjE;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBAEA,KAAM,CAAAC,WAAW,cAAGL,aAAa,CAAC,IAAI,CAAC,CAEvC,MAAO,MAAM,CAAAM,YAAY,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACvC,KAAM,CAACE,IAAI,CAAEC,OAAO,CAAC,CAAGT,QAAQ,CAAC,IAAI,CAAC,CACtC,KAAM,CAACU,KAAK,CAAEC,QAAQ,CAAC,CAAGX,QAAQ,CAAC,IAAI,CAAC,CACxC,KAAM,CAACY,OAAO,CAAEC,UAAU,CAAC,CAAGb,QAAQ,CAAC,IAAI,CAAC,CAAE;AAE9CC,SAAS,CAAC,IAAM,CACd;AACA,KAAM,CAAAa,WAAW,CAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CACjD,KAAM,CAAAC,UAAU,CAAGF,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAE/C,GAAIF,WAAW,EAAIG,UAAU,CAAE,CAC7BN,QAAQ,CAACG,WAAW,CAAC,CACrB,GAAI,CACFL,OAAO,CAACS,IAAI,CAACC,KAAK,CAACF,UAAU,CAAC,CAAC,CAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACF,CAAE,MAAOG,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,CAAEA,KAAK,CAAC,CACpDL,YAAY,CAACO,UAAU,CAAC,MAAM,CAAC,CAAE;AACnC,CACF,CACAT,UAAU,CAAC,KAAK,CAAC,CAAE;AACrB,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAU,KAAK,CAAGA,CAACC,QAAQ,CAAEC,SAAS,GAAK,CACrCV,YAAY,CAACW,OAAO,CAAC,MAAM,CAAER,IAAI,CAACS,SAAS,CAACH,QAAQ,CAAC,CAAC,CACtDT,YAAY,CAACW,OAAO,CAAC,OAAO,CAAED,SAAS,CAAC,CACxChB,OAAO,CAACe,QAAQ,CAAC,CACjBb,QAAQ,CAACc,SAAS,CAAC,CACrB,CAAC,CAED,KAAM,CAAAG,MAAM,CAAGA,CAAA,GAAM,CACnBb,YAAY,CAACO,UAAU,CAAC,MAAM,CAAC,CAC/BP,YAAY,CAACO,UAAU,CAAC,OAAO,CAAC,CAChCb,OAAO,CAAC,IAAI,CAAC,CACbE,QAAQ,CAAC,IAAI,CAAC,CACd;AACA;AACF,CAAC,CAED;AACA,KAAM,CAAAkB,iBAAiB,CAAIC,eAAe,EAAK,CAC7CrB,OAAO,CAACsB,QAAQ,EAAI,CAClB,KAAM,CAAAC,OAAO,CAAAC,aAAA,CAAAA,aAAA,IAAQF,QAAQ,EAAKD,eAAe,CAAE,CACnDf,YAAY,CAACW,OAAO,CAAC,MAAM,CAAER,IAAI,CAACS,SAAS,CAACK,OAAO,CAAC,CAAC,CACrD,MAAO,CAAAA,OAAO,CAChB,CAAC,CAAC,CACJ,CAAC,CAED,mBACE7B,IAAA,CAACC,WAAW,CAAC8B,QAAQ,EAACC,KAAK,CAAE,CAAE3B,IAAI,CAAEC,OAAO,CAAEoB,iBAAiB,CAAEnB,KAAK,CAAEa,KAAK,CAAEK,MAAM,CAAEhB,OAAQ,CAAE,CAAAL,QAAA,CAC9F,CAACK,OAAO,EAAIL,QAAQ,CACD,CAAC,CAE3B,CAAC,CAED,cAAe,CAAAH,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}