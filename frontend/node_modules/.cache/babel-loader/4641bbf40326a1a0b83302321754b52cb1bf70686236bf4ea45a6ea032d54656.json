{"ast":null,"code":"var _jsxFileName = \"/Users/caoducanh/Desktop/Coding/Gym/Scratch/frontend/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\n// import axios from 'axios'; // If you need to verify token with backend\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(null);\n  const [loading, setLoading] = useState(true); // To handle initial loading of persisted state\n\n  useEffect(() => {\n    // Try to load token and user from localStorage on initial app load\n    const storedToken = localStorage.getItem('token');\n    const storedUser = localStorage.getItem('user');\n    if (storedToken && storedUser) {\n      setToken(storedToken);\n      try {\n        setUser(JSON.parse(storedUser));\n        // Optionally, you might want to verify the token with your backend here\n        // For example:\n        // axios.get('/api/auth/verify-token', { headers: { Authorization: `Bearer ${storedToken}` }})\n        //   .then(response => setUser(response.data.user))\n        //   .catch(() => {\n        //     localStorage.removeItem('token');\n        //     localStorage.removeItem('user');\n        //     setUser(null);\n        //     setToken(null);\n        //   });\n      } catch (error) {\n        console.error(\"Failed to parse stored user:\", error);\n        localStorage.removeItem('user'); // Clear corrupted data\n      }\n    }\n    setLoading(false); // Finished loading persisted state\n  }, []);\n  const login = (userData, authToken) => {\n    localStorage.setItem('user', JSON.stringify(userData));\n    localStorage.setItem('token', authToken);\n    setUser(userData);\n    setToken(authToken);\n  };\n  const logout = () => {\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n    setUser(null);\n    setToken(null);\n    // Optionally, redirect to login page or home page\n    // window.location.href = '/login';\n  };\n\n  // This function is used by MemberProfilePage to update user details in context and localStorage\n  const updateUserContext = updatedUserData => {\n    setUser(prevUser => {\n      const newUser = {\n        ...prevUser,\n        ...updatedUserData\n      };\n      localStorage.setItem('user', JSON.stringify(newUser));\n      return newUser;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      setUser: updateUserContext,\n      token,\n      login,\n      logout,\n      loading\n    },\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"uAkFQMmIUxfxJcQTEb8tCM/KFt4=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","token","setToken","loading","setLoading","storedToken","localStorage","getItem","storedUser","JSON","parse","error","console","removeItem","login","userData","authToken","setItem","stringify","logout","updateUserContext","updatedUserData","prevUser","newUser","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/caoducanh/Desktop/Coding/Gym/Scratch/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\n// import axios from 'axios'; // If you need to verify token with backend\n\nconst AuthContext = createContext(null);\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(null);\n  const [loading, setLoading] = useState(true); // To handle initial loading of persisted state\n\n  useEffect(() => {\n    // Try to load token and user from localStorage on initial app load\n    const storedToken = localStorage.getItem('token');\n    const storedUser = localStorage.getItem('user');\n\n    if (storedToken && storedUser) {\n      setToken(storedToken);\n      try {\n        setUser(JSON.parse(storedUser));\n        // Optionally, you might want to verify the token with your backend here\n        // For example:\n        // axios.get('/api/auth/verify-token', { headers: { Authorization: `Bearer ${storedToken}` }})\n        //   .then(response => setUser(response.data.user))\n        //   .catch(() => {\n        //     localStorage.removeItem('token');\n        //     localStorage.removeItem('user');\n        //     setUser(null);\n        //     setToken(null);\n        //   });\n      } catch (error) {\n        console.error(\"Failed to parse stored user:\", error);\n        localStorage.removeItem('user'); // Clear corrupted data\n      }\n    }\n    setLoading(false); // Finished loading persisted state\n  }, []);\n\n  const login = (userData, authToken) => {\n    localStorage.setItem('user', JSON.stringify(userData));\n    localStorage.setItem('token', authToken);\n    setUser(userData);\n    setToken(authToken);\n  };\n\n  const logout = () => {\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n    setUser(null);\n    setToken(null);\n    // Optionally, redirect to login page or home page\n    // window.location.href = '/login';\n  };\n  \n  // This function is used by MemberProfilePage to update user details in context and localStorage\n  const updateUserContext = (updatedUserData) => {\n    setUser(prevUser => {\n      const newUser = { ...prevUser, ...updatedUserData };\n      localStorage.setItem('user', JSON.stringify(newUser));\n      return newUser;\n    });\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, setUser: updateUserContext, token, login, logout, loading }}>\n      {!loading && children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,WAAW,gBAAGL,aAAa,CAAC,IAAI,CAAC;AAEvC,OAAO,MAAMM,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE9CC,SAAS,CAAC,MAAM;IACd;IACA,MAAMa,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IACjD,MAAMC,UAAU,GAAGF,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAE/C,IAAIF,WAAW,IAAIG,UAAU,EAAE;MAC7BN,QAAQ,CAACG,WAAW,CAAC;MACrB,IAAI;QACFL,OAAO,CAACS,IAAI,CAACC,KAAK,CAACF,UAAU,CAAC,CAAC;QAC/B;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;MACF,CAAC,CAAC,OAAOG,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;QACpDL,YAAY,CAACO,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;MACnC;IACF;IACAT,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMU,KAAK,GAAGA,CAACC,QAAQ,EAAEC,SAAS,KAAK;IACrCV,YAAY,CAACW,OAAO,CAAC,MAAM,EAAER,IAAI,CAACS,SAAS,CAACH,QAAQ,CAAC,CAAC;IACtDT,YAAY,CAACW,OAAO,CAAC,OAAO,EAAED,SAAS,CAAC;IACxChB,OAAO,CAACe,QAAQ,CAAC;IACjBb,QAAQ,CAACc,SAAS,CAAC;EACrB,CAAC;EAED,MAAMG,MAAM,GAAGA,CAAA,KAAM;IACnBb,YAAY,CAACO,UAAU,CAAC,MAAM,CAAC;IAC/BP,YAAY,CAACO,UAAU,CAAC,OAAO,CAAC;IAChCb,OAAO,CAAC,IAAI,CAAC;IACbE,QAAQ,CAAC,IAAI,CAAC;IACd;IACA;EACF,CAAC;;EAED;EACA,MAAMkB,iBAAiB,GAAIC,eAAe,IAAK;IAC7CrB,OAAO,CAACsB,QAAQ,IAAI;MAClB,MAAMC,OAAO,GAAG;QAAE,GAAGD,QAAQ;QAAE,GAAGD;MAAgB,CAAC;MACnDf,YAAY,CAACW,OAAO,CAAC,MAAM,EAAER,IAAI,CAACS,SAAS,CAACK,OAAO,CAAC,CAAC;MACrD,OAAOA,OAAO;IAChB,CAAC,CAAC;EACJ,CAAC;EAED,oBACE7B,OAAA,CAACC,WAAW,CAAC6B,QAAQ;IAACC,KAAK,EAAE;MAAE1B,IAAI;MAAEC,OAAO,EAAEoB,iBAAiB;MAAEnB,KAAK;MAAEa,KAAK;MAAEK,MAAM;MAAEhB;IAAQ,CAAE;IAAAN,QAAA,EAC9F,CAACM,OAAO,IAAIN;EAAQ;IAAA6B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAE3B,CAAC;AAAC/B,EAAA,CA9DWF,YAAY;AAAAkC,EAAA,GAAZlC,YAAY;AAgEzB,eAAeD,WAAW;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}